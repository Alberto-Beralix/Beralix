#! /bin/sh
# postrm script for hplip
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <r>overwrit>r> <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Kill any pre-compiled python crap
kill_python_crappage() {
	[ -d /usr/share/hplip ] && \
		find /usr/share/hplip \
			\( -name '*.pyc' -o -name '*.pyo' \) \
			-exec rm -f {} \;
	:
}


case "$1" in
	failed-upgrade|abort-install|abort-upgrade)
		# Remove the symlink, no matter what. If it is
		# needed, dpkg will recreate it.  This is in an
		# downgrade/failed upgrade unwind path
		if [ -h /usr/share/doc/hplip ]; then
			rm -f /usr/share/doc/hplip
		fi
		# and kill any crap left over for failed-upgrade
		kill_python_crappage
	;;
	upgrade)
		# support downgrading
		if [ -h /usr/share/doc/hplip ]; then
			rm -f /usr/share/doc/hplip
		fi
	;;
	remove|disappear)
		kill_python_crappage
	;;
	purge)
		kill_python_crappage

		for i in /var/run/hplip ; do
			dpkg-statoverride --remove $i || true
		done

    		[ -d /var/run/hplip ] && rm -fr /var/run/hplip
	;;
    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1

esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.



exit 0
