<?xml version="1.0" encoding="utf-8" standalone="no"?>
<?xml-stylesheet type="text/xml" href="params.xsl"?>
<!-- vim: set ai tw=80 ts=3 sw=3: -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "
              http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY FDL SYSTEM "fdl-appendix.xml">
<!ENTITY FDLlink "<link linkend='fdl'>included</link>">
]>
<!-- =============Document Header ============================= -->
<book id="index" lang="en_GB">
  <bookinfo>
    <title>GTK-Doc Manual</title>
    <edition>1.18</edition>
    <abstract role="description"><para>User manual for developers with instructions on GTK-Doc usage.</para></abstract>
    <authorgroup>
      <author>
        <firstname>Chris</firstname>
        <surname>Lyttle</surname>
        <affiliation>
          <address>
            <email>chris@wilddev.net</email>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Dan</firstname>
        <surname>Mueth</surname>
        <affiliation>
          <address>
            <email>d-mueth@uchicago.edu</email>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Stefan</firstname>
        <surname>Kost</surname>
        <affiliation>
          <address>
            <email>ensonic@users.sf.net</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>
    <publisher role="maintainer">
      <publishername>GTK-Doc project</publishername>
      <address><email>gtk-doc-list@gnome.org</email></address>
    </publisher>
    <copyright>
      <year>2000, 2005</year>
      <holder>Dan Mueth and Chris Lyttle</holder>
    </copyright>
    <copyright>
      <year>2007-2011</year>
      <holder>Stefan Sauer (Kost)</holder>
    </copyright><copyright><year>2009</year><holder>Jen Ockwell (jenfraggleubuntu@gmail.com)</holder></copyright><copyright><year>2009</year><holder>Philip Withnall (philip@tecnocode.co.uk)</holder></copyright>

    <!-- translators: uncomment this:
    <copyright>
      <year>2000</year>
      <holder>ME-THE-TRANSLATOR (Latin translation)</holder>
    </copyright>
    -->

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this document under the terms of the <citetitle>GNU Free Documentation Licence</citetitle>, Version 1.1 or any later version published by the Free Software Foundation with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the licence is <link linkend="fdl">included</link>.</para>
      <para>Many of the names used by companies to distinguish their products and services are claimed as trademarks. Where those names appear in any GNOME documentation, and those trademarks are made aware to the members of the GNOME Documentation Project, the names have been printed in caps or initial caps.</para>
    </legalnotice>

    <revhistory>
      <!--revision>
        <revnumber>1.18.1</revnumber>
        <date>15 Sep 2011</date>
        <authorinitials>sk</authorinitials>
        <revremark>development version, markdown support</revremark>
      </revision-->
      <revision>
        <revnumber>1.18</revnumber>
        <date>14 sep 2011</date>
        <authorinitials>sk</authorinitials>
        <revremark>bug fixes, speedups, markdown support</revremark>
      </revision>
      <revision>
        <revnumber>1.17</revnumber>
        <date>26 Feb 2011</date>
        <authorinitials>sk</authorinitials>
        <revremark>urgent bug fix update</revremark>
      </revision>
      <revision>
        <revnumber>1.16</revnumber>
        <date>14 Jan 2011</date>
        <authorinitials>sk</authorinitials>
        <revremark>bugfixes, layout improvements</revremark>
      </revision>
      <revision>
        <revnumber>1.15</revnumber>
        <date>21 May 2010</date>
        <authorinitials>sk</authorinitials>
        <revremark>bug and regression fixes</revremark>
      </revision>
      <revision>
        <revnumber>1.14</revnumber>
        <date>28 March 2010</date>
        <authorinitials>sk</authorinitials>
        <revremark>bugfixes and performance improvements</revremark>
      </revision>
      <revision>
        <revnumber>1.13</revnumber>
        <date>18 December 2009</date>
        <authorinitials>sk</authorinitials>
        <revremark>broken tarball update</revremark>
      </revision>
      <revision>
        <revnumber>1.12</revnumber>
        <date>18 December 2009</date>
        <authorinitials>sk</authorinitials>
        <revremark>new tool features and bugfixes</revremark>
      </revision>
      <revision>
        <revnumber>1.11</revnumber>
        <date>16 Novemebr 2008</date>
        <authorinitials>mal</authorinitials>
        <revremark>GNOME doc-utils migration</revremark>
      </revision>
    </revhistory>

  </bookinfo>

  <!-- ======== Chapter 1: Introduction ======================== -->

  <chapter id="introduction">
    <title>Introduction</title>

    <para>This chapter introduces GTK-Doc and gives an overview of what it is and how it is used.</para>

    <sect1 id="whatisgtkdoc">
      <title>What is GTK-Doc?</title>

      <para>GTK-Doc is used to document C code. It is typically used to document the public API of libraries, such as the GTK+ and GNOME libraries, but it can also be used to document application code.</para>
    </sect1>

    <sect1 id="howdoesgtkdocwork">
      <title>How Does GTK-Doc Work?</title>

      <para>GTK-Doc works by using documentation of functions placed inside the source files in specially-formatted comment blocks, or documentation added to the template files which GTK-Doc uses (though note that GTK-Doc will only document functions that are declared in header files; it won't produce output for static functions).</para>

      <para>GTK-Doc consists of a number of Perl scripts, each performing a different step in the process.</para>

      <para>There are 5 main steps in the process:</para>

      <orderedlist>

        <listitem>
          <para><guilabel>Writing the documentation.</guilabel> The author fills in the source files with the documentation for each function, macro, union etc. (In the past information was entered in generated template files, which is not recommended any more).</para>
        </listitem>

        <listitem>
          <para>
            <guilabel>Gathering information about the code.</guilabel>

            <application>gtkdoc-scan</application> scans the header files of the
            code looking for declarations of functions, macros, enums, structs, and unions.
            It creates the file <filename>&lt;module&gt;-decl-list.txt</filename> containg a list of the
            declarations, placing them into sections according to which header file they
            are in. On the first run this file is copied to <filename>&lt;module&gt;-sections.txt</filename>.
            The author can rearrange the sections, and the order of the
            declarations within them, to produce the final desired order.
            The second file it generates is <filename>&lt;module&gt;-decl.txt</filename>.
            This file contains the full declarations found by the scanner. If for
            some reason one would like some symbols to show up in the docs, where
            the full declaration cannot be found by the scanner or the declaration
            should appear differently, one can place enties similar to the ones in
            <filename>&lt;module&gt;-decl.txt</filename> into <filename>&lt;module&gt;-overrides.txt</filename>.

            <application>gtkdoc-scanobj</application> can also be used to dynamically query a library about
            any GtkObject subclasses it exports. It saves information about each
            object's position in the class hierarchy and about any GTK Args and Signals it
            provides.
          </para>
        </listitem>

        <listitem>
          <para><guilabel>Generating the "template" files.</guilabel> <application>gtkdoc-mktmpl</application> creates a number of files in the <filename class="directory">tmpl/</filename> subdirectory, using the information gathered in the first step. (Note that this can be run repeatedly. It will try to ensure that no documentation is ever lost.)</para>
          <note>
            <para>
              Since GTK-Doc 1.9 the templates can be avoided. We encourage people to keep
              documentation in the code. <application>gtkdocize</application> supports now
              a <option>--flavour no-tmpl</option> option that chooses a makefile that
              skips tmpl usage totally.
              If you have never changed file in tmpl by hand, please remove the dir
              (e.g. from version control system).
            </para>
          </note>
        </listitem>

        <listitem>
          <para>
            <guilabel>Generating the SGML/XML and HTML/PDF.</guilabel>

            <application>gtkdoc-mkdb</application> turns the template files into
            SGML or XML files in the <filename class="directory">sgml/</filename>
            or <filename class="directory">xml/</filename> subdirectory.
            If the source code contains documentation on functions, using the
            special comment blocks, it gets merged in here. If there are no tmpl files used
            it only reads docs from sources and introspection data. We recommend
            to use Docbook XML.
          </para>
          <para>
            <application>gtkdoc-mkhtml</application> turns the SGML/XML files into HTML
            files in the <filename class="directory">html/</filename> subdirectory.
            Likewise <application>gtkdoc-mkpdf</application> turns the SGML/XML files into a PDF
            document called <filename>&lt;package&gt;.pdf</filename>.
          </para>
          <para>
            Files in <filename class="directory">sgml/</filename> or
            <filename class="directory">xml/</filename> and <filename class="directory">html/</filename>
            directories are always overwritten. One should never edit them directly.
          </para>
        </listitem>

        <listitem>
          <para><guilabel>Fixing up cross-references between documents.</guilabel> After installing the HTML files, <application>gtkdoc-fixxref</application> can be run to fix up any cross-references between separate documents. For example, the GTK+ documentation contains many cross-references to types documented in the GLib manual. When creating the source tarball for distribution, <application>gtkdoc-rebase</application> turns all external links into web-links. When installing distributed (pre-generated) docs the same application will try to turn links back to local links (where those docs are installed).</para>
        </listitem>
      </orderedlist>

    </sect1>

    <sect1 id="gettinggtkdoc">
      <title>Getting GTK-Doc</title>

      <sect2 id="requirements">
        <title>Requirements</title>
        <para><guilabel>Perl v5</guilabel> — the main scripts are in Perl.</para>
        <para><guilabel>DocBook DTD v3.0</guilabel> — This is the DocBook SGML DTD. <ulink url="http://www.ora.com/davenport" type="http">http://www.ora.com/davenport</ulink></para>
        <para><guilabel>Jade v1.1</guilabel> — This is a DSSSL processor for converting SGML to various formats. <ulink url="http://www.jclark.com/jade" type="http">http://www.jclark.com/jade</ulink></para>
        <para><guilabel>Modular DocBook Stylesheets</guilabel> This is the DSSSL code to convert DocBook to HTML (and a few other formats). It's used together with jade. The DSSSL code has been customised slightly, in gtk-doc.dsl, to colour the program code listings/declarations, and to support global cross-reference indices in the generated HTML. <ulink url="http://nwalsh.com/docbook/dsssl" type="http">http://nwalsh.com/docbook/dsssl</ulink></para>
        <para><guilabel>docbook-to-man</guilabel> — if you want to create man pages from the DocBook. The 'translation spec' has been customised slightly, to capitalise section headings and add the 'GTK Library' title at the top of the pages and the revision date at the bottom. There is a link to this on <ulink url="http://www.ora.com/davenport" type="http">http://www.ora.com/davenport</ulink> NOTE: This does not work yet.</para>
      </sect2>

      <sect2 id="installation">
        <title>Installation</title>
        <para>There is no standard place where the DocBook Modular Stylesheets are installed.</para>
        <para>
          GTK-Doc's configure script searches these 3 directories automatically:
        </para>
        <para><filename>/usr/lib/sgml/stylesheets/nwalsh-modular</filename> (used by Red Hat)</para>
        <para><filename>/usr/lib/dsssl/stylesheets/docbook</filename> (used by Debian)</para>
        <para><filename>/usr/share/sgml/docbkdsl</filename> (used by SuSE)</para>
        <para>
          If you have the stylesheets installed somewhere else, you need to configure
          GTK-Doc using the option:
          <command> --with-dsssl-dir=&lt;PATH_TO_TOPLEVEL_STYLESHEETS_DIR&gt; </command>
        </para>
      </sect2>

    </sect1>

    <!-- not realy worth a section
    <sect1 id="whentousegtkdoc">
      <title>When to Use GTK-Doc</title>

      <para>
        (What things GTK-Doc should, and shouldn't, be used for.)
        (- ???)
        (- non C-based projects)
        (+ Tutorials)
      </para>

    </sect1>
    -->

    <sect1 id="aboutgtkdoc">
      <title>About GTK-Doc</title>

      <para>(FIXME)</para>

      <para>(History, authors, web pages, licence, future plans, comparison with other similar systems.)</para>

    </sect1>

    <sect1 id="aboutthismanual">
      <title>About this Manual</title>

      <para>(FIXME)</para>

      <para>(who it is meant for, where you can get it, licence)</para>

    </sect1>

  </chapter>

  <chapter id="settingup">
    <title>Setting up your project</title>

    <para>
      The next sections describe what steps to perform to integrate GTK-Doc into
      your project. Theses sections assume we work on a project called 'meep'.
      This project contains a library called 'libmeep' and
      an end-user app called 'meeper'. We also assume you will be using autoconf
      and automake. In addition section <link linkend="plain_makefiles">plain
      makefiles or other build systems</link> will describe the basics needed to
      work in a different build setup.
    </para>

    <sect1 id="settingup_docfiles">
      <title>Setting up a skeleton documentation</title>

      <para>Under your top-level project directory create a folder called <filename class="directory">docs/reference</filename> (this way you can also have <filename class="directory">docs/help</filename> for end-user documentation). It is recommended to create another subdirectory with the name of the doc-package. For packages with just one library this step is not necessary.</para>

      <para>
        This can then look as shown below:
        <example><title>Example directory structure</title>
          <programlisting>
<![CDATA[
meep/
  docs/
    reference/
      libmeep/
      meeper/
  src/
    libmeep/
    meeper/
]]>
          </programlisting>
        </example>
      </para>
    </sect1>

    <sect1 id="settingup_autoconf">
      <title>Integration with autoconf</title>

      <para>Very easy! Just add one line to your <filename>configure.ac</filename> script.</para>

      <para>
        <example><title>Integration with autoconf</title>
          <programlisting>
<![CDATA[
# check for gtk-doc
GTK_DOC_CHECK([1.14],[--flavour no-tmpl])
]]>
          </programlisting>
        </example>
      </para>

      <para>
        This will require all developers to have gtk-doc installed. If it is
        okay for your project to have optional api-doc build setup, you can
        solve this as below. Keep it as is, as gtkdocize is looking for
        <function>GTK_DOC_CHECK</function>  at the start of a line.
        <example><title>Keep gtk-doc optional</title>
          <programlisting>
<![CDATA[
# check for gtk-doc
m4_ifdef([GTK_DOC_CHECK], [
GTK_DOC_CHECK([1.14],[--flavour no-tmpl])
],[
AM_CONDITIONAL([ENABLE_GTK_DOC], false)
])
]]>
          </programlisting>
        </example>
      </para>

      <para>
        The first argument is used to check for the gtkdocversion at configure time.
        The 2nd, optional argument is used by <application>gtkdocize</application>.
        The <symbol>GTK_DOC_CHECK</symbol> macro also adds several configure switches:
      </para>
      <orderedlist>
        <listitem><para>--with-html-dir=PATH : path to installed docs</para></listitem>
        <listitem><para>--enable-gtk-doc : use gtk-doc to build documentation [default=no]</para></listitem>
        <listitem><para>--enable-gtk-doc-html : build documentation in html format [default=yes]</para></listitem>
        <listitem><para>--enable-gtk-doc-pdf : build documentation in pdf format [default=no]</para></listitem>
      </orderedlist>

      <important>
      	<para>
          GTK-Doc is disabled by default! Remember to pass the option
          <option>'--enable-gtk-doc'</option> to the next
          <filename>configure</filename> run. Otherwise pregenerated documentation is installed
          (which makes sense for users but not for developers).
        </para>
      </important>

      <para>
        Furthermore it is recommended that you have the following line inside
        you <filename>configure.ac</filename> script.
        This allows <application>gtkdocize</application> to automatically copy the
        macro definition for <function>GTK_DOC_CHECK</function> to your project.
      </para>

      <para>
        <example><title>Preparation for gtkdocize</title>
          <programlisting>
<![CDATA[
AC_CONFIG_MACRO_DIR(m4)
]]>
          </programlisting>
        </example>
      </para>
    </sect1>

    <sect1 id="settingup_automake">
      <title>Integration with automake</title>

      <para>First copy the <filename>Makefile.am</filename> from the <filename class="directory">examples</filename> subdirectory of the GTK-Doc sources to your project's API documentation directory (<filename class="directory">./docs/reference/<replaceable>package</replaceable></filename>). If you have multiple doc-packages, repeat this for each one.</para>

      <para>
        The next step is to edit the settings inside the <filename>Makefile.am</filename>.
        All the settings have a comment above that describes their purpose.
        Most settings are extra flags passed to the respective tools. Every tool
        has a variable of the form <option>&lt;TOOLNAME&gt;_OPTIONS</option>.
        All the tools support <option>--help</option> to list the supported
        parameters.
      </para>

      <!-- FIXME: explain options ? -->

      <para>
        You may also want to enable GTK-Doc for the distcheck make target. Just
        add the one line shown in the next example to your top-level
        <filename>Makefile.am</filename>:
      </para>

      <para>
        <example><title>Enable GTK-Doc during make distcheck</title>
          <programlisting>
<![CDATA[
DISTCHECK_CONFIGURE_FLAGS=--enable-gtk-doc
]]>
          </programlisting>
        </example>
      </para>

    </sect1>

    <sect1 id="settingup_autogen">
      <title>Integration with autogen</title>

      <para>
        Most projects will have an <filename>autogen.sh</filename> script to
        setup the build infrastructure after a checkout from version control
        system (such as cvs/svn/git). GTK-Doc comes with a tool called
        <application>gtkdocize</application> which can be used in such a script.
        It should be run before autoheader, automake or autoconf.
      </para>

      <para>
        <example><title>Running gtkdocize from autogen.sh</title>
          <programlisting>
<![CDATA[
gtkdocize || exit 1
]]>
          </programlisting>
        </example>
      </para>

      <para>
        When running <application>gtkdocize</application> it copies
        <filename>gtk-doc.make</filename> to your project root (or any directory
        specified by the <option>--docdir</option> option).
        It also checks you configure script for the <function>GTK_DOC_CHECK</function>
        invocation. This macro can be used to pass extra parameters to
        <application>gtkdocize</application>.
      </para>

      <para>
        Historically GTK-Doc was generating template files where developers entered the docs.
        This turned out to be not so good (e.g. the need for having generated
        files under version control).
        Since GTK-Doc 1.9 the tools can get all the information from source comments
        and thus the templates can be avoided. We encourage people to keep
        documentation in the code. <application>gtkdocize</application> supports now
        a <option>--flavour no-tmpl</option> option that chooses a makefile that skips
        tmpl usage totally. Besides adding the option directly to the command
        invocation, they can be added also to an environment variable called <symbol>GTKDOCIZE_FLAGS</symbol>
        or set as a 2nd parameter in <symbol>GTK_DOC_CHECK</symbol> macro in the configure script.
        If you have never changed file in tmpl by hand and migrating from older gtkdoc versions,
        please remove the dir (e.g. from version control system).
      </para>
    </sect1>

    <sect1 id="settingup_firstrun">
      <title>Running the doc build</title>

      <para>After the previous steps it is time to run the build. First we need to rerun <filename>autogen.sh</filename>. If this script runs <filename>configure</filename> for you, then give it the <option>--enable-gtk-doc</option> option. Otherwise manually run <filename>configure</filename> with this option afterwards.</para>
      <para>
        The first make run generates several additional files in the doc-dirs.
        The important ones are:
        <filename>&lt;package&gt;.types</filename>,
        <filename>&lt;package&gt;-docs.xml</filename> (in the past .sgml),
        <filename>&lt;package&gt;-sections.txt</filename>.
      </para>
      <para>
        <example><title>Running the doc build</title>
          <programlisting>
<![CDATA[
./autogen.sh --enable-gtk-doc
make
]]>
          </programlisting>
        </example>
      </para>
      <para>Now you can point your browser to <filename>docs/reference/<replaceable>package</replaceable>/index.html</filename>. Yes, it's a bit disappointing still. But hang on; during the next chapter we tell you how to fill the pages with life.</para>
    </sect1>

    <sect1 id="settingup_vcs">
      <title>Integration with version control systems</title>

      <para>
        As a rule of the thumb, it's those files you edit, that should go under
        version control. For typical projects it's these files:
        <filename>&lt;package&gt;.types</filename>,
        <filename>&lt;package&gt;-docs..xml</filename> (in the past .sgml),
        <filename>&lt;package&gt;-sections.txt</filename>,
        <filename>Makefile.am</filename>
      </para>
    </sect1>

    <sect1 id="plain_makefiles">
      <title>Integration with plain makefiles or other build systems</title>

      <para>
        In the case one does not want to use automake and therfore
        <filename>gtk-doc.mak</filename> one will need to call the gtkdoc tools
        in the right order in own makefiles (or other build tools).
      </para>

      <para>
        <example><title>Documentation build steps</title>
          <programlisting>
<![CDATA[
DOC_MODULE=meep
// sources have changed
gtkdoc-scan --module=$(DOC_MODULE) --source-dir=...
gtkdoc-scangobj --module=$(DOC_MODULE)
gtkdoc-mkdb --module=$(DOC_MODULE) --output-format=xml
// xml files have changed
mkdir html
cd html && gtkdoc-mkhtml $(DOC_MODULE) ../meep-docs.xml
gtkdoc-fixxref --module=$(DOC_MODULE) --module-dir=html
]]>
          </programlisting>
        </example>
      </para>

      <para>
        One will need to look at the <filename>Makefile.am</filename> and
        <filename>gtk-doc.mak</filename> to pick the extra options needed.
      </para>
    </sect1>

  </chapter>

  <chapter id="documenting">
    <title>Documenting the code</title>

    <para>
      GTK-Doc uses source code comment with a special syntax for code documentation.
      Further it retrieves information about your project structure from other
      sources. During the next section you will find all information about the
      syntax of the comments.
    </para>

    <note>
      <title>Documentation placement</title>
      <para>In the past most documentation had to be filled into files residing inside the <filename class="directory">tmpl</filename> directory. This has the disadvantages that the information is often not updated and also that the file tend to cause conflicts with version control systems.</para>
      <para>To avoid the aforementioned problems we suggest putting the documentation inside the sources. This manual will only describe this way of documenting code.</para>
    </note>

    <para>
      The scanner can handle the majority of c headers fine. In the case of
      receiving warnings from the scanner that look like a special case, one can
      hint GTK-Doc to skip over them.
      <example><title>GTK-Doc comment block</title>
        <programlisting>
<![CDATA[
#ifndef __GTK_DOC_IGNORE__
/* unparseable code here */
#endif
]]>
        </programlisting>
      </example>
    </para>

    <!--  -->

    <sect1 id="documenting_syntax">
      <title>Documentation comments</title>

      <para>
        A multiline comment that starts with an additional '*' marks a
        documentation block that will be processed by the GTK-Doc tools.
        <example><title>GTK-Doc comment block</title>
          <programlisting>
<![CDATA[
/**
 * identifier:
 * documentation ...
 */
]]>
          </programlisting>
        </example>
      </para>

      <para>The 'identifier' is one line with the name of the item to which the comment is related. The syntax differs a little depending on the item. (TODO add table showing identifiers)</para>

      <para>The 'documentation' block is also different for each symbol type. Symbol types that get parameters such as functions or macros have the parameter description first followed by a blank line (just a <literal>*</literal>). Afterwards follows the detailed description. All lines (outside program listings and CDATA sections) just containing a <literal> *</literal> (blank-asterisk) are converted to paragraph breaks. If you don't want a paragraph break, change that into <literal> *  </literal> (blank-asterisk-blank-blank).</para>

      <tip>
        <para>
          When documenting code, describe two apsects:
          <itemizedlist>
             <listitem>
               <para>
                 What it is: The name for a class or function can sometimes
                 be misleading for people coming from a different background.
                </para>
             </listitem>
             <listitem>
               <para>
                 What it does: Tell about common uses. Put it in releation
                 with the other API.
               </para>
             </listitem>
           </itemizedlist>
        </para>
      </tip>

      <para>
        One advantage of hyper-text over plain-text is the ability to have links
        in the document. Writing the correct markup for a link can be tedious
        though. GTK-Doc comes to help by providing several useful abbreviations.
        <itemizedlist>
          <listitem>
            <para>Use <literal>function()</literal> to refer to functions or macros which take arguments.</para>
          </listitem>
          <listitem>
            <para>Use <literal>@param</literal> to refer to parameters. Also use this when referring to parameters of other functions, related to the one being described.</para>
          </listitem>
          <listitem>
            <para>Use <literal>%constant</literal> to refer to a constant, e.g. <literal>%G_TRAVERSE_LEAFS</literal>.</para>
          </listitem>
          <listitem>
            <para>Use <literal>#symbol</literal> to refer to other types of symbol, e.g. structs and enums and macros which don't take arguments.</para>
          </listitem>
          <listitem>
            <para>Use <literal>#Object::signal</literal> to refer to a GObject signal</para>
          </listitem>
          <listitem>
            <para>Use <literal>#Object:property</literal> to refer to a GObject property</para>
          </listitem>
          <listitem>
            <para>Use <literal>#Struct.field</literal> to refer to a field inside a structure.</para>
          </listitem>
        </itemizedlist>
      </para>

      <tip>
	     <para>
          If you need to use the special characters '&lt;', '&gt;', '()', '@',
          '%', or '#' in your documentation without GTK-Doc changing them you
          can use the XML entities "&amp;lt;", "&amp;gt;", "&amp;lpar;",
          "&amp;rpar;", "&amp;commat;", "&amp;percnt;" and "&amp;num;"
          respectively or escape them with a backslash '\'.
	     </para>
      </tip>

      <para>
        DocBook can do more than just links. One can also have lists, tables and
        examples. To enable the usage of docbook SGML/XML tags inside
        doc-comments you need to have <option>--xml-mode</option> or
        <option>--sgml-mode</option> in the variable
        <symbol>MKDB_OPTIONS</symbol> inside <filename>Makefile.am</filename>.
      </para>

      <para>
        Since GTK-Doc-1.18 the tool supports a subset or the
        <ulink url="http://daringfireball.net/projects/markdown/">markdown language</ulink>.
        One can use it for sub-headings and simple itemized lists. On older
        GTK-Doc versions the content will be rendered as it (the list items will
        appear in one line separated by dashes).
        <example><title>GTK-Doc comment block using markdown</title>
          <programlisting>
<![CDATA[
/**
 * identifier:
 *
 * documentation ...
 *
 * # Sub heading #
 *
 * more documentation:
 * - list item 1
 * - list item 2
 *
 * Even more docs.
 */
]]>
          </programlisting>
        </example>
      </para>

      <tip>
	<para>
	  As already mentioned earlier GTK-Doc is for documenting public API. Thus
	  one cannot write documentation for static symbols. Nevertheless it is good
	  to comment those symbols too. This helps other to understand you code.
	  Therefore we recommend to comment these using normal comments (without the
	  2nd '*' in the first line).
	  If later the function needs to be made public, all one needs to do is to
	  add another '*' in the comment block and insert the symbol name at the
	  right place inside the sections file.
	</para>
      </tip>
    </sect1>

    <sect1 id="documenting_sections">
      <title>Documenting sections</title>

      <para>
        Each section of the documentation contains information about one class
        or module. To introduce the component one can write a section block.
        The short description is also used inside the table of contents.
        All the @fields are optional.
      </para>

      <para>
        <example><title>Section comment block</title>
          <programlisting>
<![CDATA[
/**
 * SECTION:meepapp
 * @short_description: the application class
 * @title: Meep application
 * @section_id:
 * @see_also: #MeepSettings
 * @stability: Stable
 * @include: meep/app.h
 * @image: application.png
 *
 * The application class handles ...
 */
]]>
          </programlisting>
        </example>
      </para>

      <variablelist>
        <varlistentry>
          <term>SECTION:&lt;name&gt;</term>
          <listitem>
            <para>
              The name links the section documentation to the respective part in
              the <filename>&lt;package&gt;-sections.txt</filename> file. The
              name give here should match the &lt;FILE&gt; tag in the
              <filename>&lt;package&gt;-sections.txt</filename> file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@short_description</term>
          <listitem>
            <para>A one line description of the section that later will appear after the links in the TOC and at the top of the section page.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@title</term>
          <listitem>
            <para>
              The section title defaults to &lt;name&gt; from the SECTION
              declaration. It can be overridden with the @title field.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@section_id</term>
          <listitem>
            <para>
              Overrides the use of title as a section identifier. For GObjects
              the &lt;title&gt; is used as a section_id and for other sections
              it is &lt;MODULE&gt;-&lt;title&gt;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@see_also</term>
          <listitem>
            <para>
              A list of symbols that are related to this section.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@stability</term>
          <listitem>
            <para>A informal description of the stability level this API has. We recommend the use of one of these terms: <itemizedlist>
                <listitem>
                  <para>Stable — The intention of a Stable interface is to enable arbitrary third parties to develop applications to these interfaces, release them, and have confidence that they will run on all minor releases of the product (after the one in which the interface was introduced, and within the same major release). Even at a major release, incompatible changes are expected to be rare, and to have strong justifications.</para>
                </listitem>
                <listitem>
                  <para>Unstable — Unstable interfaces are experimental or transitional. They are typically used to give outside developers early access to new or rapidly-changing technology, or to provide an interim solution to a problem where a more general solution is anticipated. No claims are made about either source or binary compatibility from one minor release to the next.</para>
                </listitem>
                <listitem>
                  <para>Private — An interface that can be used within the GNOME stack itself, but that is not documented for end-users. Such functions should only be used in specified and documented ways.</para>
                </listitem>
                <listitem>
                  <para>Internal — An interface that is internal to a module and does not require end-user documentation. Functions that are undocumented are assumed to be Internal.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@include</term>
          <listitem>
            <para>The <literal>#include</literal> files to show in the section synopsis (a comma-separated list), overriding the global value from the <link linkend="metafiles_sections">section file</link> or command line. This item is optional.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@image</term>
          <listitem>
            <para>
              The image to display at the top of the reference page for this
              section.  This will often be some sort of a diagram to illustrate
              the visual appearance of a class or a diagram of its relationship
              to other classes.  This item is optional.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <tip>
        <para>To avoid unnecessary recompilation after doc-changes put the section docs into the C source where possible.</para>
      </tip>

    </sect1>

    <sect1 id="documenting_symbols">
      <title>Documenting symbols</title>

      <para>
        Each symbol (function, macro, struct, enum, signal and property) is
        documented in a separate block. The block is best placed close to the
        definition of the symbols so that it is easy to keep them in sync.
        Thus functions are usually documented in the c-source and macros,
        structs and enums in the header file.
      </para>

      <sect2><title>General tags</title>

        <para>
          You can add versioning information to all documentation elements to tell
          when an api was introduced, or when it was deprecated.
        </para>

        <variablelist><title>Versioning Tags</title>
          <varlistentry><term>Since:</term>
            <listitem>
              <para>Description since which version of the code the API is available.</para>
            </listitem>
          </varlistentry>
          <varlistentry><term>Deprecated:</term>
            <listitem>
              <para>Paragraph denoting that this function should no be used any more. The description should point the reader to the new API.</para>
            </listitem>
          </varlistentry>
        </variablelist>

          <para>
            (FIXME : Stability information)
          </para>

        <example><title>General tags</title>
          <programlisting>
<![CDATA[
/**
 * foo_get_bar:
 * @foo: some foo
 *
 * Retrieves @foo's bar.
 *
 * Returns: @foo's bar
 *
 * Since: 2.6
 * Deprecated: 2.12: Use foo_baz_get_bar() instead.
 **/
Bar *
foo_get_bar(Foo *foo)
{
...
]]>
          </programlisting>
        </example>
      </sect2>

      <sect2><title>Function comment block</title>

        <para>
          Please remember to:
          <itemizedlist>
            <listitem>
              <para>
                Document whether returned objects, lists, strings, etc, should be
                freed/unrefed/released.
              </para>
            </listitem>
            <listitem>
              <para>
                Document whether parameters can be NULL, and what happens if they are.
              </para>
            </listitem>
            <listitem>
              <para>
                Mention interesting pre-conditions and post-conditions where appropriate.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>GTK-Doc assumes all symbols (macros, functions) starting with <literal>_</literal> are private. They are treated like static functions.</para>

        <para>
          
          Also, take a look at gobject introspection annotation tags:
          http://live.gnome.org/GObjectIntrospection/Annotations
        </para>

        <example><title>Function comment block</title>
          <programlisting>
<![CDATA[
/**
 * function_name:
 * @par1:  description of parameter 1. These can extend over more than
 * one line.
 * @par2:  description of parameter 2
 * @...: a %NULL-terminated list of bars
 *
 * The function description goes here. You can use @par1 to refer to parameters
 * so that they are highlighted in the output. You can also use %constant
 * for constants, function_name2() for functions and #GtkWidget for links to
 * other declarations (which may be documented elsewhere).
 *
 * Returns: an integer.
 *
 * Since: 2.2
 * Deprecated: 2.18: Use other_function() instead.
 */
]]>
          </programlisting>
        </example>

        <variablelist><title>Function tags</title>
          <varlistentry><term>Returns:</term>
            <listitem>
              <para>Paragraph describing the returned result.</para>
            </listitem>
          </varlistentry>
          <varlistentry><term>@...:</term>
            <listitem>
              <para>
                In case the function has variadic arguments, you should use this
                tag (@Varargs: does also work for historic reasons).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect2>

      <sect2><title>Property comment block</title>

        <example><title>Property comment block</title>
          <programlisting>
<![CDATA[
/**
 * SomeWidget:some-property:
 *
 * Here you can document a property.
 */
g_object_class_install_property (object_class, PROP_SOME_PROPERTY, ...);
]]>
          </programlisting>
        </example>

      </sect2>

      <sect2><title>Signal comment block</title>

        <para>
          Please remember to:
          <itemizedlist>
            <listitem>
              <para>
                Document when the signal is emitted and whether it is emitted before
                or after other signals.
              </para>
            </listitem>
            <listitem>
              <para>
                Document what an application might do in the signal handler.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <example><title>Signal comment block</title>
          <programlisting>
<![CDATA[
/**
 * FooWidget::foobarized:
 * @widget: the widget that received the signal
 * @foo: some foo
 * @bar: some bar
 *
 * The ::foobarized signal is emitted each time someone tries to foobarize @widget.
 */
foo_signals[FOOBARIZE] =
  g_signal_new ("foobarize",
                ...
]]>
          </programlisting>
        </example>

      </sect2>

      <sect2><title>Struct comment block</title>
        <example><title>Struct comment block</title>
          <programlisting>
<![CDATA[
/**
 * FooWidget:
 * @bar: some #gboolean
 *
 * This is the best widget, ever.
 */
typedef struct _FooWidget {
  /*< private >*/
  GtkWidget parent;

  /*< public >*/
  gboolean bar;
} FooWidget;
]]>
          </programlisting>
        </example>

        <para>
          Use <code>/*&lt; private &gt;*/</code> before the private struct fields
          you want to hide. Use <code>/*&lt; public &gt;*/</code> for the reverse
          behaviour.
        </para>

        <para>
          Struct comment blocks can also be used for GObjects and GObjectClasses.
          It is usualy a good idea to add a comment blco for a class, if it has
          vmethods (as this is how they can be documented). For the GObject
          itself one can use the related section docs, having a separate block
          for the instance struct would be useful if the instance has public
          fields. One disadvantage here is that this creates two index entries
          of the same name (the structure and the section).
        </para>

      </sect2>

      <sect2><title>Enum comment block</title>
        <example><title>Enum comment block</title>
          <programlisting>
<![CDATA[
/**
 * Something:
 * @SOMETHING_FOO: something foo
 * @SOMETHING_BAR: something bar
 *
 * Enum values used for the thing, to specify the thing.
 *
 **/
typedef enum {
  SOMETHING_FOO,
  SOMETHING_BAR,
  /*< private >*/
  SOMETHING_COUNT
} Something;
]]>
          </programlisting>
        </example>

        <para>
          Use <code>/*&lt; private &gt;*/</code> before the private enum values
          you want to hide. Use <code>/*&lt; public &gt;*/</code> for the reverse
          behaviour.
        </para>

      </sect2>
    </sect1>

    <sect1 id="documenting_docbook">
      <title>Useful DocBook tags</title>

      <para>Here are some DocBook tags which are most useful when documenting the code.</para>

      <para>
        To link to another section in the GTK docs:

        <informalexample>
          <programlisting>
<![CDATA[
<link linkend="glib-Hash-Tables">Hash Tables</link>
]]>
          </programlisting>
        </informalexample>
        The linkend is the SGML/XML id on the top item of the page you want to link to.
        For most pages this is currently the part ("gtk", "gdk", "glib") and then
        the page title ("Hash Tables"). For widgets it is just the class name.
        Spaces and underscores are converted to '-' to conform to SGML/XML.
      </para>

      <para>To refer to an external function, e.g. a standard C function: <informalexample>
          <programlisting>
<![CDATA[
<function>...</function>
]]>
          </programlisting>
        </informalexample></para>

      <para>
        To include example code:
        <informalexample>
          <programlisting>
<![CDATA[
<example>
  <title>Using a GHashTable.</title>
  <programlisting>
      ...
  </programlisting>
</example>
]]>
          </programlisting>
        </informalexample>
        or possibly this, for very short code fragments which don't need a title:
        <informalexample>
          <programlisting>
<![CDATA[
<informalexample>
  <programlisting>
  ...
  </programlisting>
</informalexample>
]]>
          </programlisting>
        </informalexample>
        For the latter GTK-Doc also supports an abbreviation:
<![CDATA[
|[
  ...
]|
]]>
      </para>

      <para>To include bulleted lists: <informalexample>
          <programlisting>
<![CDATA[
<itemizedlist>
  <listitem>
    <para>
      ...
    </para>
  </listitem>
  <listitem>
    <para>
      ...
    </para>
  </listitem>
</itemizedlist>
]]>
          </programlisting>
        </informalexample></para>

      <para>To include a note which stands out from the text: <informalexample>
          <programlisting>
<![CDATA[
<note>
  <para>
    Make sure you free the data after use.
  </para>
</note>
]]>
          </programlisting>
        </informalexample></para>

      <para>To refer to a type: <informalexample>
          <programlisting>
<![CDATA[
<type>unsigned char</type>
]]>
          </programlisting>
        </informalexample></para>

      <para>To refer to an external structure (not one described in the GTK docs): <informalexample>
          <programlisting>
<![CDATA[
<structname>XFontStruct</structname>
]]>
          </programlisting>
        </informalexample></para>

      <para>To refer to a field of a structure: <informalexample>
          <programlisting>
<![CDATA[
<structfield>len</structfield>
]]>
          </programlisting>
        </informalexample></para>

      <para>To refer to a class name, we could possibly use: <informalexample>
          <programlisting>
<![CDATA[
<classname>GtkWidget</classname>
]]>
          </programlisting>
        </informalexample> but you'll probably be using <literal>#GtkWidget</literal> instead (to automatically create a link to the GtkWidget page — see <link linkend="documenting_syntax">the abbreviations</link>).</para>

      <para>To emphasise text: <informalexample>
          <programlisting>
<![CDATA[
<emphasis>This is important</emphasis>
]]>
          </programlisting>
        </informalexample></para>

      <para>For filenames use: <informalexample>
          <programlisting>
<![CDATA[
<filename>/home/user/documents</filename>
]]>
          </programlisting>
        </informalexample></para>

      <para>
        To refer to keys use:
        <informalexample>
          <programlisting>
<![CDATA[
<keycombo><keycap>Control</keycap><keycap>L</keycap></keycombo>
]]>
          </programlisting>
        </informalexample>
      </para>

    </sect1>
  </chapter>

  <chapter id="metafiles">
    <title>Filling the extra files</title>

    <para>
      There are a couple of extra files, that need to be maintained along with
      the inline source code comments:
      <filename>&lt;package&gt;.types</filename>,
      <filename>&lt;package&gt;-docs.xml</filename> (in the past .sgml),
      <filename>&lt;package&gt;-sections.txt</filename>.
    </para>

    <sect1 id="metafiles_types">
      <title>Editing the types file</title>

      <para>If your library or application includes GtkObjects/GObjects, you want their signals, arguments/parameters and position in the hierarchy to be shown in the documentation. All you need to do is to list the <function>xxx_get_type</function> functions together with their include inside the <filename><replaceable>package</replaceable>.types</filename> file.</para>

      <para>
        <example><title>Example types file snippet</title>
          <programlisting>
<![CDATA[
#include <gtk/gtk.h>

gtk_accel_label_get_type
gtk_adjustment_get_type
gtk_alignment_get_type
gtk_arrow_get_type
]]>
          </programlisting>
        </example>
      </para>

      <para>
        Since GTK-Doc 1.8 <application>gtkdoc-scan</application> can generate this list for you.
        Just add "--rebuild-types" to SCAN_OPTIONS in <filename>Makefile.am</filename>. If you
        use this approach you should not dist the types file nor have it under version control.
      </para>

    </sect1>

    <sect1 id="metafiles_master">
      <title>Editing the master document</title>

      <para>
        GTK-Doc produces documentation in DocBook SGML/XML. When processing the
        inline source comments, the GTK-Doc tools generate one documentation
        page per class or module as a separate file. The master document
        includes them and place them in an order.
      </para>

      <para>
        While GTK-Doc creates a template master document for you, later run will
        not touch it again. This means that one can freely structure the
        documentation. That includes grouping pages and adding extra pages.
        GTK-Doc has now a test suite, where also the master-document is recreated from scratch.
        Its a good idea to look at this from time to time to see if there are some new goodies
        introduced there.
      </para>

      <tip>
        <para>Do not create tutorials as extra documents. Just write extra chapters. The benefit of directly embedding the tutorial for your library into the API documentation is that it is easy to link for the tutorial to symbol documentation. Also, chances are higher that the tutorial gets updates along with the library.</para>
      </tip>

      <para>So what are the things to change inside the master document? There are some placeholders (text in square brackets) there which you should take care of.</para>

      <para>
        <example><title>Master document header</title>
          <programlisting>
<![CDATA[
<bookinfo>
  <title>MODULENAME Reference Manual</title>
  <releaseinfo>
    for MODULENAME [VERSION]
    The latest version of this documentation can be found on-line at
    <ulink role="online-location" url="http://[SERVER]/MODULENAME/index.html">http://[SERVER]/MODULENAME/</ulink>.
  </releaseinfo>
</bookinfo>

<chapter>
  <title>[Insert title here]</title>
]]>
          </programlisting>
        </example>
      </para>

    </sect1>

    <sect1 id="metafiles_sections">
      <title>Editing the section file</title>

      <para>
        The section file is used to organise the documentation output by
        GTK-Doc. Here one specifies which symbol belongs to which module or
        class and control the visibility (public or private).
      </para>

      <para>The section file is a plain test file with XML-like syntax (using tags). Blank lines are ignored and lines starting with a <literal>#</literal> are treated as comment lines.</para>

      <para>
        The &lt;FILE&gt; ... &lt;/FILE&gt; tag is used to specify the file name,
        without any suffix. For example, using '&lt;FILE&gt;gnome-config&lt;/FILE&gt;'
        will result in the section declarations being output in the template
        file <filename>tmpl/gnome-config.sgml</filename>, which will be
        converted into the DocBook SGML/XML file <filename>sgml/gnome-config.sgml</filename>
        or .DocBook XML file <filename>xml/gnome-config.xml</filename>.
        (The name of the html file is based on the module name and the section
        title, or for gobjects it is based on the gobjects class name converted
        to lower case).
      </para>

      <para>
        The &lt;TITLE&gt; ... &lt;/TITLE&gt; tag is used to specify the title of
        the section. It is only useful before the templates (if used) are
        initially created, since the title set in the template file overrides
        this. Also if one uses SECTION comment in the sources, this is obsolete.
      </para>

      <para>
        You can group items in the section by using the &lt;SUBSECTION&gt; tag.
        Currently it outputs a blank line between subsections in the synopsis
        section.
        You can also use &lt;SUBSECTION Standard&gt; for standard GObject
        declarations (e.g. the functions like g_object_get_type and macros like
        G_OBJECT(), G_IS_OBJECT() etc.).
        Currently these are left out of the documentation.
        You can also use &lt;SUBSECTION Private&gt; for private declarations
        which will not be output (It is a handy way to avoid warning messages
        about unused declarations.).
        If your library contains private types which you don't want to appear in
        the object hierarchy and the list of implemented or required interfaces,
        add them to a Private subsection.
        Wheter you would place GObject and GObjectClass like structs in public
        or Standard section depends if they have public entries (variables,
        vmethods).
      </para>

      <para>You can also use &lt;INCLUDE&gt; ... &lt;/INCLUDE&gt; to specify the <literal>#include</literal> files which are shown in the synopsis sections. It contains a comma-separated list of <literal>#include</literal> files, without the angle brackets. If you set it outside of any sections, it acts for all sections until the end of the file. If you set it within a section, it only applies to that section.</para>

    </sect1>

  </chapter>

  <chapter id="reports">
    <title>Controlling the result</title>

    <para>
      A GTK-Doc run generates report files inside the documentation directory.
      The generated files are named:
      <filename>&lt;package&gt;-undocumented.txt</filename>,
      <filename>&lt;package&gt;-undeclared.txt</filename> and
      <filename>&lt;package&gt;-unused.txt</filename>.
      All those are plain text files that can be viewed and postprocessed easily.
    </para>

    <para>The <filename><replaceable>package</replaceable>-undocumented.txt</filename> file starts with the documentation coverage summary. Below are two sections divided by blank lines. The first section lists undocumented or incomplete symbols. The second section does the same for section docs. Incomplete entries are those, which have documentation, but where e.g. a new parameter has been added.</para>

    <para>
      The <filename>&lt;package&gt;-undeclared.txt</filename> file lists symbols
      given in the <filename>&lt;package&gt;-sections.txt</filename> but not
      found in the sources. Check if they have been removed or if they are
      misspelled.
    </para>

    <para>
      The <filename>&lt;package&gt;-unused.txt</filename> file lists symbol
      names, where the GTK-Doc scanner has found documentation, but does not
      know where to put it. This means that the symbol has not yet been added to
      the <filename>&lt;package&gt;-sections.txt</filename> file.
    </para>

    <tip>
      <para>
        Enable or add the <option>TESTS=$(GTKDOC_CHECK)</option> line in Makefile.am.
        If at least GTK-Doc 1.9 is installed, this will run sanity checks during
        <command>make check</command> run.
      </para>
    </tip>

    <para>
      One can also look at the files produced by the source code scanner:
      <filename>&lt;package&gt;-decl-list.txt</filename> and
      <filename>&lt;package&gt;-decl.txt</filename>. The first one can be
      compared with the section file if that is manualy maintained. The second
      lists all declarations fromt he headers If a symbol is missing one could
      check if this file contains it.
    </para>

    <para>
      If the project is GObject based, one can also look into the files produced
      by the object scanner:
      <filename>&lt;package&gt;.args.txt</filename>,
      <filename>&lt;package&gt;.hierarchy.txt</filename>,
      <filename>&lt;package&gt;.interfaces.txt</filename>,
      <filename>&lt;package&gt;.prerequisites.txt</filename> and
      <filename>&lt;package&gt;.signals.txt</filename>. If there are missing
      symbols in any of those, one can ask gtkdoc to keep the intermedia scanner
      file for further analysis, but running it as
      <command>GTK_DOC_KEEP_INTERMEDIATE=1 make</command>.
    </para>
  </chapter>

  <chapter id="documenting-others">
    <title>Documenting other interfaces</title>

    <para>
      So far we have been using GTK-Doc to document the API of code. The next
      sections contain suggestions how the tools can be used to document other
      interfaces too.
    </para>

    <sect1 id="commandline-interfaces">
      <title>Commandline options and man pages</title>

      <para>
        As one can generate man pages for a docbook refentry as well, it sounds
        like a good idea to use it for that purpose. This way the interface is
        part of the reference and one gets the man-page for free.
      </para>

      <sect2 id="commandline-interfaces-file">
        <title>Document the tool</title>

        <para>
          Create one refentry file per tool. Following
          <link linkend="settingup_docfiles">our example</link> we would call it
          <filename>meep/docs/reference/meeper/meep.xml</filename>. For the xml
          tags that should be used and can look at generated file in the xml
          subdirectory as well as examples e.g. in glib.
        </para>
      </sect2>

      <sect2 id="commandline-interfaces-configure">
        <title>Adding the extra configure check</title>

        <para>
          <example><title>Extra configure checks</title>
            <programlisting>
<![CDATA[
AC_ARG_ENABLE(man,
              [AC_HELP_STRING([--enable-man],
                              [regenerate man pages from Docbook [default=no]])],enable_man=yes,
              enable_man=no)

AC_PATH_PROG([XSLTPROC], [xsltproc])
AM_CONDITIONAL(ENABLE_MAN, test x$enable_man != xno)
]]>
            </programlisting>
          </example>
        </para>
      </sect2>

      <sect2 id="commandline-interfaces-make">
        <title>Adding the extra makefile rules</title>

        <para>
          <example><title>Extra configure checks</title>
            <programlisting>
<![CDATA[
man_MANS = \
       meeper.1

if ENABLE_GTK_DOC
if ENABLE_MAN

%.1 : %.xml
        @XSLTPROC@ -nonet http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl $<

endif
endif

BUILT_EXTRA_DIST = $(man_MANS)
EXTRA_DIST += meep.xml
]]>
            </programlisting>
          </example>
        </para>
      </sect2>
    </sect1>

    <sect1 id="dbus-interfaces">
      <title>DBus interfaces</title>

      <para>
        (FIXME: http://hal.freedesktop.org/docs/DeviceKit/DeviceKit.html,
http://cgit.freedesktop.org/DeviceKit/DeviceKit/tree/doc/dbus)
      </para>
    </sect1>

  </chapter>

  <chapter id="faq">
    <title>Frequently asked questions</title>

    <segmentedlist>
      <?dbhtml list-presentation="list"?>
      <segtitle>Question</segtitle>
      <segtitle>Answer</segtitle>
      <seglistitem>
        <seg>No class hierarchy.</seg>
        <seg>
          The objects <function>xxx_get_type()</function> function has not been
          entered into the <filename>&lt;package&gt;.types</filename> file.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>Still no class hierarchy.</seg>
        <seg>
          Missing or wrong naming in <filename>&lt;package&gt;-sections.txt</filename>
          file (see <ulink url="http://mail.gnome.org/archives/gtk-doc-list/2003-October/msg00006.html">explanation</ulink>).
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>Damn, I still have no class hierarchy.</seg>
        <seg>
          Is the object name (name of the instance struct, e.g. <type>GtkWidget</type>)
          part of the normal section (don't put this into Standard or Private
          subsections).
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>No symbol index.</seg>
        <seg>
          Does the <filename>&lt;package&gt;-docs.{xml,sgml}</filename> contain a
          index that xi:includes the generated index?
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>Symbols are not linked to their doc-section.</seg>
        <seg>
          Is the doc-comment using the correct markup (added #,% or ())?
          Check if the gtkdoc-fixxref warns about unresolvable xrefs.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>A new class does not appear in the docs.</seg>
        <seg>
          Is the new page xi:included from
          <filename>&lt;package&gt;-docs.{xml,sgml}</filename>.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>A new symbol does not appear in the docs.</seg>
        <seg>
          Is the doc-comment properly formatted. Check for spelling mistakes in
          the begin of the comment. Check if the gtkdoc-fixxref warns about
          unresolvable xrefs. Check if the symbol is correctly listed in the
          <filename>&lt;package&gt;-sections.txt</filename> in a public subsection.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>A type is missing from the class hierarchy.</seg>
        <seg>
          If the type is listed in <filename>&lt;package&gt;.hierarchy</filename>
          but not in <filename>xml/tree_index.sgml</filename> then double check
          that the type is correctly placed in the <filename>&lt;package&gt;-sections.txt</filename>.
          If the type instance (e.g. <type>GtkWidget</type>) is not listed or
          incidentialy makred private it will not be shown.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>I get foldoc links for all gobject annotations.</seg>
        <seg>
          Check that <filename>xml/annotation-glossary.xml</filename> is
          xi:included from <filename>&lt;package&gt;-docs.{xml,sgml}</filename>.
        </seg>
      </seglistitem>

      <!-- gtk-doc warnings: -->
      <seglistitem>
        <seg>Parameter described in source code comment block but does not exist</seg>
        <seg>Check if the prototype in the header has different parameter names to the source.</seg>
      </seglistitem>

      <!-- docbook warnings: -->
      <seglistitem>
        <seg>multiple "IDs" for constraint linkend: XYZ</seg>
        <seg>Symbol XYZ appears twice in <filename>&lt;package&gt;-sections.txt</filename> file.</seg>
      </seglistitem>
      <seglistitem>
        <seg>Element typename in namespace '' encountered in para, but no template matches.</seg>
        <seg/>
      </seglistitem>
    </segmentedlist>
  </chapter>

  <chapter id="contrib">
    <title>Tools related to gtk-doc</title>

    <para>
      GtkDocPlugin - a <ulink url="http://trac-hacks.org/wiki/GtkDocPlugin">Trac GTK-Doc</ulink>
      integration plugin, that adds api docs to a trac site and integrates with
      the trac search.
    </para>
    <para>
      Gtkdoc-depscan - a tool (part of gtk-doc) to check used API against since
      tags in the api to determine the minimum required version.
    </para>

  </chapter>

  <!-- ======== Appendix: FDL ================================== -->
  <!--  
     The GNU Free Documentation License 1.1 in DocBook
     Markup by Eric Baudais <baudais@okstate.edu>
     Maintained by the GNOME Documentation Project
     http://developer.gnome.org/projects/gdp
     Version: 1.0.1
     Last Modified: Nov 16, 2000
-->

<appendix id="fdl">
  <appendixinfo>
    <releaseinfo>Version 1.1, March 2000</releaseinfo>
    <copyright>
      <year>2000</year><holder>Free Software Foundation, Inc.</holder>
    </copyright>
    <legalnotice id="fdl-legalnotice">
      <para><address>Free Software Foundation, Inc. <street>51 Franklin Street, Suite 330</street>, <city>Boston</city>, <state>MA</state><postcode>02110-1301</postcode><country>USA</country></address> Everyone is permitted to copy and distribute verbatim copies of this licence document, but changing it is not allowed.</para>
    </legalnotice>
  </appendixinfo>
  <title>GNU Free Documentation Licence</title>

  <sect1 id="fdl-preamble">
    <title>0. PREAMBLE</title>
    <para>The purpose of this Licence is to make a manual, textbook, or other written document <quote>free</quote> in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this Licence preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.</para>
    
    <para>This Licence is a kind of <quote>copyleft</quote>, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public Licence, which is a copyleft licence designed for free software.</para>
    
    <para>We have designed this Licence in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this Licence is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this Licence principally for works whose purpose is instruction or reference.</para>
  </sect1>
  <sect1 id="fdl-section1">
    <title>1. APPLICABILITY AND DEFINITIONS</title>
    <para id="fdl-document">This Licence applies to any manual or other work that contains a notice placed by the copyright holder saying it can be distributed under the terms of this Licence. The <quote>Document</quote>, below, refers to any such manual or work. Any member of the public is a licencee, and is addressed as <quote>you</quote>.</para>
    
    <para id="fdl-modified">A <quote>Modified Version</quote> of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.</para>
	
    <para id="fdl-secondary">A <quote>Secondary Section</quote> is a named appendix or a front-matter section of the <link linkend="fdl-document">Document</link> that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (For example, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.</para>

    <para id="fdl-invariant">The <quote>Invariant Sections</quote> are certain <link linkend="fdl-secondary"> Secondary Sections</link> whose titles are designated, as being those of Invariant Sections, in the notice that says that the <link linkend="fdl-document">Document</link> is released under this Licence.</para>
    
    <para id="fdl-cover-texts">The <quote>Cover Texts</quote> are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the <link linkend="fdl-document">Document</link> is released under this Licence.</para>
	
    <para id="fdl-transparent">A <quote>Transparent</quote> copy of the <link linkend="fdl-document"> Document</link> means a machine-readable copy, represented in a format whose specification is available to the general public, whose contents can be viewed and edited directly and straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup has been designed to thwart or discourage subsequent modification by readers is not Transparent. A copy that is not <quote>Transparent</quote> is called <quote>Opaque</quote>.</para>
    
    <para>Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML designed for human modification. Opaque formats include PostScript, PDF, proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML produced by some word processors for output purposes only.</para>
    
    <para id="fdl-title-page">The <quote>Title Page</quote> means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this Licence requires to appear in the title page. For works in formats which do not have any title page as such, <quote>Title Page</quote> means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.</para>
  </sect1>
    
  <sect1 id="fdl-section2">
    <title>2. VERBATIM COPYING</title>
    <para>You may copy and distribute the <link linkend="fdl-document">Document</link> in any medium, either commercially or noncommercially, provided that this Licence, the copyright notices, and the licence notice saying this Licence applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this Licence. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in <link linkend="fdl-section3">section 3</link>.</para>
    
    <para>You may also lend copies, under the same conditions stated above, and you may publicly display copies.</para>
    </sect1>
    
  <sect1 id="fdl-section3">
    <title>3. COPYING IN QUANTITY</title>
    <para>If you publish printed copies of the <link linkend="fdl-document">Document</link> numbering more than 100, and the Document's licence notice requires <link linkend="fdl-cover-texts">Cover Texts</link>, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the <link linkend="fdl-document">Document</link> and satisfy these conditions, can be treated as verbatim copying in other respects.</para>
    
    <para>If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.</para>
    
    <para>If you publish or distribute <link linkend="fdl-transparent">Opaque</link> copies of the <link linkend="fdl-document">Document</link> numbering more than 100, you must either include a machine-readable <link linkend="fdl-transparent">Transparent</link> copy along with each Opaque copy, or state in or with each Opaque copy a publicly-accessible computer-network location containing a complete Transparent copy of the Document, free of added material, which the general network-using public has access to download anonymously at no charge using public-standard network protocols. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.</para>
    
    <para>It is requested, but not required, that you contact the authors of the <link linkend="fdl-document">Document</link> well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.</para>
    </sect1>
    
  <sect1 id="fdl-section4">
    <title>4. MODIFICATIONS</title>
    <para>You may copy and distribute a <link linkend="fdl-modified">Modified Version</link> of the <link linkend="fdl-document">Document</link> under the conditions of sections <link linkend="fdl-section2">2</link> and <link linkend="fdl-section3">3</link> above, provided that you release the Modified Version under precisely this Licence, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:</para>
    
    <itemizedlist mark="opencircle">
      <listitem>
	<formalpara>
	  <title>A</title>
	  <para>Use in the <link linkend="fdl-title-page">Title Page</link> (and on the covers, if any) a title distinct from that of the <link linkend="fdl-document">Document</link>, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>B</title>
	  <para>List on the <link linkend="fdl-title-page">Title Page</link>, as authors, one or more persons or entities responsible for authorship of the modifications in the <link linkend="fdl-modified">Modified Version</link>, together with at least five of the principal authors of the <link linkend="fdl-document">Document</link> (all of its principal authors, if it has less than five).</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>C</title>
	  <para>State on the <link linkend="fdl-title-page">Title Page</link> the name of the publisher of the <link linkend="fdl-modified">Modified Version</link>, as the publisher.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>D</title>
	  <para>Preserve all the copyright notices of the <link linkend="fdl-document">Document</link>.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>E</title>
	  <para>Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>F</title>
	  <para>Include, immediately after the copyright notices, a licence notice giving the public permission to use the <link linkend="fdl-modified">Modified Version</link> under the terms of this Licence, in the form shown in the Addendum below.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>G</title>
	  <para>Preserve in that licence notice the full lists of <link linkend="fdl-invariant"> Invariant Sections</link> and required <link linkend="fdl-cover-texts">Cover Texts</link> given in the <link linkend="fdl-document">Document's</link> licence notice.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>H</title>
	  <para>Include an unaltered copy of this Licence.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>I</title>
	  <para>Preserve the section entitled <quote>History</quote>, and its title, and add to it an item stating at least the title, year, new authors, and publisher of the <link linkend="fdl-modified">Modified Version </link>as given on the <link linkend="fdl-title-page">Title Page</link>. If there is no section entitled <quote>History</quote> in the <link linkend="fdl-document">Document</link>, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>J</title>
	  <para>Preserve the network location, if any, given in the <link linkend="fdl-document">Document</link> for public access to a <link linkend="fdl-transparent">Transparent</link> copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the <quote>History</quote> section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>K</title>
	  <para>In any section entitled <quote>Acknowledgements</quote> or <quote>Dedications</quote>, preserve the section's title, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>L</title>
	  <para>Preserve all the <link linkend="fdl-invariant">Invariant Sections</link> of the <link linkend="fdl-document">Document</link>, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>M</title>
	  <para>Delete any section entitled <quote>Endorsements</quote>. Such a section may not be included in the <link linkend="fdl-modified">Modified Version</link>.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title>N</title>
	  <para>Do not retitle any existing section as <quote>Endorsements</quote> or to conflict in title with any <link linkend="fdl-invariant">Invariant Section</link>.</para>
	</formalpara>
      </listitem>
    </itemizedlist>
    
    <para>If the <link linkend="fdl-modified">Modified Version</link> includes new front-matter sections or appendices that qualify as <link linkend="fdl-secondary">Secondary Sections</link> and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of <link linkend="fdl-invariant">Invariant Sections</link> in the Modified Version's licence notice. These titles must be distinct from any other section titles.</para>
    
    <para>You may add a section entitled <quote>Endorsements</quote>, provided it contains nothing but endorsements of your <link linkend="fdl-modified">Modified Version</link> by various parties--for example, statements of peer review or that the text has been approved by an organisation as the authoritative definition of a standard.</para>
    
    <para>You may add a passage of up to five words as a <link linkend="fdl-cover-texts">Front-Cover Text</link>, and a passage of up to 25 words as a <link linkend="fdl-cover-texts">Back-Cover Text</link>, to the end of the list of <link linkend="fdl-cover-texts">Cover Texts</link> in the <link linkend="fdl-modified">Modified Version</link>. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the <link linkend="fdl-document">Document</link> already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.</para>
    
    <para>The author(s) and publisher(s) of the <link linkend="fdl-document">Document</link> do not by this Licence give permission to use their names for publicity for or to assert or imply endorsement of any <link linkend="fdl-modified">Modified Version </link>.</para>
  </sect1>
    
  <sect1 id="fdl-section5">
    <title>5. COMBINING DOCUMENTS</title>
    <para>You may combine the <link linkend="fdl-document">Document</link> with other documents released under this Licence, under the terms defined in <link linkend="fdl-section4">section 4</link> above for modified versions, provided that you include in the combination all of the <link linkend="fdl-invariant">Invariant Sections</link> of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its licence notice.</para>
    
    <para>The combined work need only contain one copy of this Licence, and multiple identical <link linkend="fdl-invariant">Invariant Sections</link> may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the licence notice of the combined work.</para>
    
    <para>In the combination, you must combine any sections entitled <quote>History</quote> in the various original documents, forming one section entitled <quote>History</quote>; likewise combine any sections entitled <quote>Acknowledgements</quote>, and any sections entitled <quote>Dedications</quote>. You must delete all sections entitled <quote>Endorsements.</quote></para>
    </sect1>
    
  <sect1 id="fdl-section6">
    <title>6. COLLECTIONS OF DOCUMENTS</title>
    <para>You may make a collection consisting of the <link linkend="fdl-document">Document</link> and other documents released under this Licence, and replace the individual copies of this Licence in the various documents with a single copy that is included in the collection, provided that you follow the rules of this Licence for verbatim copying of each of the documents in all other respects.</para>
    
    <para>You may extract a single document from such a collection, and distribute it individually under this Licence, provided you insert a copy of this Licence into the extracted document, and follow this Licence in all other respects regarding verbatim copying of that document.</para>
    </sect1>
    
  <sect1 id="fdl-section7">
    <title>7. AGGREGATION WITH INDEPENDENT WORKS</title>
    <para>A compilation of the <link linkend="fdl-document">Document</link> or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, does not as a whole count as a <link linkend="fdl-modified">Modified Version</link> of the Document, provided no compilation copyright is claimed for the compilation. Such a compilation is called an <quote>aggregate</quote>, and this Licence does not apply to the other self-contained works thus compiled with the Document , on account of their being thus compiled, if they are not themselves derivative works of the Document. If the <link linkend="fdl-cover-texts">Cover Text</link> requirement of <link linkend="fdl-section3">section 3</link> is applicable to these copies of the Document, then if the Document is less than one quarter of the entire aggregate, the Document's Cover Texts may be placed on covers that surround only the Document within the aggregate. Otherwise they must appear on covers around the whole aggregate.</para>
    </sect1>
    
  <sect1 id="fdl-section8">
    <title>8. TRANSLATION</title>
    <para>Translation is considered a kind of modification, so you may distribute translations of the <link linkend="fdl-document">Document</link> under the terms of <link linkend="fdl-section4">section 4</link>. Replacing <link linkend="fdl-invariant"> Invariant Sections</link> with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this Licence provided that you also include the original English version of this Licence. In case of a disagreement between the translation and the original English version of this Licence, the original English version will prevail.</para>
    </sect1>
    
  <sect1 id="fdl-section9">
    <title>9. TERMINATION</title>
    <para>You may not copy, modify, sublicence, or distribute the <link linkend="fdl-document">Document</link> except as expressly provided for under this Licence. Any other attempt to copy, modify, sublicence or distribute the Document is void, and will automatically terminate your rights under this Licence. However, parties who have received copies, or rights, from you under this Licence will not have their licences terminated so long as such parties remain in full compliance.</para>
    </sect1>
    
  <sect1 id="fdl-section10">
    <title>10. FUTURE REVISIONS OF THIS LICENCE</title>
    <para>The <ulink type="http" url="http://www.gnu.org/fsf/fsf.html">Free Software Foundation</ulink> may publish new, revised versions of the GNU Free Documentation Licence from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See <ulink type="http" url="http://www.gnu.org/copyleft">http://www.gnu.org/copyleft/</ulink>.</para>
    
    <para>Each version of the Licence is given a distinguishing version number. If the <link linkend="fdl-document">Document</link> specifies that a particular numbered version of this Licence <quote>or any later version</quote> applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this Licence, you may choose any version ever published (not as a draft) by the Free Software Foundation.</para>
  </sect1>

  <sect1 id="fdl-using">
    <title>Addendum</title>
    <para>To use this Licence in a document you have written, include a copy of the Licence in the document and put the following copyright and licence notices just after the title page:</para>
    
    <blockquote>
      <para>Copyright YEAR YOUR NAME.</para>
      <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation Licence, Version 1.1 or any later version published by the Free Software Foundation; with the <link linkend="fdl-invariant">Invariant Sections</link> being LIST THEIR TITLES, with the <link linkend="fdl-cover-texts">Front-Cover Texts</link> being LIST, and with the <link linkend="fdl-cover-texts">Back-Cover Texts</link> being LIST. A copy of the licence is included in the section entitled <quote>GNU Free Documentation Licence</quote>.</para>
    </blockquote>
      
    <para>If you have no <link linkend="fdl-invariant">Invariant Sections</link>, write <quote>with no Invariant Sections</quote> instead of saying which ones are invariant. If you have no <link linkend="fdl-cover-texts">Front-Cover Texts</link>, write <quote>no Front-Cover Texts</quote> instead of <quote>Front-Cover Texts being LIST</quote>; likewise for <link linkend="fdl-cover-texts">Back-Cover Texts</link>.</para>
    
    <para>If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software licence, such as the <ulink type="http" url="http://www.gnu.org/copyleft/gpl.html"> GNU General Public Licence</ulink>, to permit their use in free software.</para>
  </sect1>
</appendix>  








</book>
